{"version":3,"sources":["components/Table.js","components/LiveSearch.js","components/Slider.js","components/Filters.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Table","tableColumns","Header","accessor","sortable","resizable","className","width","Cell","props","react_default","a","createElement","height","src","value","es","noDataText","previousText","nextText","loadingText","pageText","ofText","rowsText","defaultPageSize","data","this","shopData","columns","style","marginBottom","React","Component","LiveSearch","Row","FormControl","type","placeholder","localStorage","getItem","onChange","handleLiveSearch","Range","createSliderWithTooltip","Slider","minPrice","maxPrice","findExtremePrices","array","max","price","Number","MAX_VALUE","forEach","item","i","arr","MySlider","state","lowerBound","parseInt","_this","upperBound","handleChangePriceInput","event","target","name","setState","Object","defineProperty","handleChangePriceSlider","onSliderChange","rangeValues","_sliderMarks","sliderMarks","Form","inline","FormGroup","ControlLabel","marginRight","min","marginLeft","marginTop","Col","xs","allowCross","marks","Filters","extremePrices","undefined","searchInputValue","persist","eventValue","setItem","handleShopDataChange","LiveSearch_LiveSearch","xsOffset","Slider_MySlider","Card","Jumbotron","itemInfo","base_url","id","title","discount","App","goods","showItemCard","_ref","shopItemValue","_ref2","isNaN","toLowerCase","displayedShopItems","filter","element","searchValue","itemId","indexOf","_ref3","Grid","Filters_Filters","length","Card_Card","Table_Table","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.505050dc.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactTable from \"react-table\";\r\nimport 'react-table/react-table.css'\r\n\r\n// Табличка с хорошим встроенным функционалом и настройками: react-table.js.org\r\nexport default class Table extends React.Component {\r\n\r\n    render() {\r\n        const tableColumns = [{\r\n            Header: 'Id',\r\n            accessor: 'id',\r\n            sortable: false,\r\n            resizable: false,\r\n            className: 'align-center',\r\n            width: 100,\r\n        }, {\r\n            Header: 'Название',\r\n            accessor: 'data.title',\r\n            resizable: false,\r\n            className: 'align-center',\r\n            width: 450,\r\n        }, {\r\n            Header: 'Картинка',\r\n            accessor: 'data.base_url',\r\n            Cell: props => <img height={'160px'} src={props.value}/>,\r\n            className: 'align-center',\r\n            sortable: false,\r\n            resizable: false,\r\n        }, {\r\n            Header: 'Цена',\r\n            accessor: 'data.price',\r\n            className: 'align-center',\r\n            resizable: false,\r\n        }, {\r\n            Header: 'Скидка',\r\n            accessor: 'data.discount',\r\n            className: 'align-center',\r\n            resizable: false,\r\n        }];\r\n\r\n        return (\r\n            <ReactTable\r\n                noDataText='Товаров с такой ценой и названием или id не найдено!'\r\n                previousText='Предыдущая страница'\r\n                nextText='Следующая страница'\r\n                loadingText='Загрузка...'\r\n                pageText='Страница'\r\n                ofText='из'\r\n                rowsText='товаров'\r\n                defaultPageSize={5}\r\n                data={this.props.shopData}\r\n                columns={tableColumns}\r\n                style={{marginBottom: '50px'}}\r\n            />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {FormControl, Row} from \"react-bootstrap\";\r\n\r\n// Простой input для поля поиска по названию/id\r\nexport default class LiveSearch extends React.Component {\r\n    render() {\r\n        return(\r\n            <Row>\r\n                <p>Фильтр по названию или id</p>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    placeholder=\"Введите название продукта или его id\"\r\n                    value={localStorage.getItem('searchInputValue') ? localStorage.getItem('searchInputValue') : ''}\r\n                    onChange={this.props.handleLiveSearch}\r\n                />\r\n            </Row>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport {Col, ControlLabel, Form, FormControl, FormGroup, Row} from \"react-bootstrap\";\r\n\r\nconst createSliderWithTooltip = Slider.createSliderWithTooltip\r\nconst Range = createSliderWithTooltip(Slider.Range)\r\n\r\nconst minPrice = localStorage.getItem('minPrice')\r\nconst maxPrice = localStorage.getItem('maxPrice')\r\n\r\n// Функция поиска минимального/максимального значения цены, max - флаг (true-ищем максимальную, false-минимальную)\r\nfunction findExtremePrices(array, max) {\r\n        let price = max ? 0 : Number.MAX_VALUE\r\n        array.forEach((item, i, arr) => {\r\n            if (max ? item.data.price > price : item.data.price < price) {\r\n                price = item.data.price\r\n            }\r\n        })\r\n        return price\r\n}\r\n\r\nexport default class MySlider extends React.Component {\r\n\r\n    // Устанавливаем значения цены \"От\"(lowerBound) и цены \"До\"(upperBound) из localStorage, если они там есть\r\n    state = {\r\n        lowerBound: minPrice ? parseInt(minPrice) : findExtremePrices(this.props.shopData, false),\r\n        upperBound: maxPrice ? parseInt(maxPrice) : findExtremePrices(this.props.shopData, true),\r\n        maxPrice: findExtremePrices(this.props.shopData, true),\r\n        minPrice: findExtremePrices(this.props.shopData, false),\r\n        value: [minPrice ? parseInt(minPrice) : findExtremePrices(this.props.shopData, false), maxPrice ? parseInt(maxPrice) : findExtremePrices(this.props.shopData, true)],\r\n    }\r\n\r\n    // Функция, которая обрабатываем изменения полей цены \"От\"(lowerBound) и цены \"До\"(upperBound), изменяет на соответствующие значения\r\n    // в слайдере и после этого вызывает функцию фильтрации с новыми параметрами\r\n    handleChangePriceInput = (event) => {\r\n        // Проверка для parseInt(''), которая в этом случае возвращает NaN, что вызовет ошибку\r\n        let value = event.target.value === '' ? 0 : parseInt(event.target.value)\r\n        let name = event.target.name\r\n        if (name === 'lowerBound') {\r\n            this.setState({\r\n                value: [value, this.state.upperBound],\r\n                [name]: value,\r\n            }, () => {this.props.handleChangePriceSlider(this.state.value)})\r\n        } else {\r\n            this.setState({\r\n                value: [this.state.lowerBound, value],\r\n                [name]: value,\r\n            }, () => {this.props.handleChangePriceSlider(this.state.value)})\r\n        }\r\n    }\r\n\r\n    // Фуннкция, которая обрабатывает изменение слайдера, изменяет на соответствующие значения\r\n    // поля цены \"От\"(lowerBound) и цены \"До\"(upperBound), после этого вызывает функцию фильтрации с новыми параметрами\r\n    onSliderChange = (rangeValues) => {\r\n        this.setState({\r\n            value: rangeValues,\r\n            lowerBound: rangeValues[0],\r\n            upperBound: rangeValues[1],\r\n        }, () => {this.props.handleChangePriceSlider(this.state.value)})\r\n    }\r\n\r\n    render() {\r\n        const sliderMarks = {\r\n            [this.state.minPrice]: <strong>{this.state.minPrice}</strong>,\r\n            [this.state.maxPrice]: <strong>{this.state.maxPrice}</strong>,\r\n        }\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Form inline>\r\n                        <p>Фильтр по цене</p>\r\n                        <FormGroup>\r\n                            <ControlLabel style={{marginRight: '20px'}}>От</ControlLabel>\r\n                            <FormControl min={this.state.minPrice} max={this.state.maxPrice} name=\"lowerBound\" type=\"number\" value={this.state.lowerBound} onChange={this.handleChangePriceInput} />\r\n                        </FormGroup>\r\n                        <FormGroup style={{marginLeft: '20px'}}>\r\n                            <ControlLabel style={{marginRight: '20px'}}>До</ControlLabel>\r\n                            <FormControl min={this.state.minPrice} max={this.state.maxPrice} name=\"upperBound\" type=\"number\" value={this.state.upperBound} onChange={this.handleChangePriceInput} />\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Row>\r\n                <Row style={{marginTop: '20px'}}>\r\n                    <Col xs={6}>\r\n                        <Range\r\n                            min={this.state.minPrice}\r\n                            max={this.state.maxPrice}\r\n                            allowCross={false}\r\n                            value={this.state.value}\r\n                            onChange={this.onSliderChange}\r\n                            marks={sliderMarks}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {Col, Row} from \"react-bootstrap\";\r\nimport LiveSearch from \"./LiveSearch\";\r\nimport Slider from \"./Slider\";\r\n\r\nexport default class Filters extends React.Component{\r\n\r\n    state = {\r\n        extremePrices: undefined,\r\n        searchInputValue: undefined,\r\n    }\r\n\r\n    // Функция, которая сохраняет значение из поля поиска по названию или id в localStorage и state, после их изменения вызывает функцию фильтрации с новыми данными\r\n    handleLiveSearch = (event) => {\r\n        event.persist()\r\n        let eventValue = event.target.value\r\n        localStorage.setItem('searchInputValue', eventValue)\r\n        this.setState({\r\n            searchInputValue: eventValue,\r\n        }, () => {this.props.handleShopDataChange(this.state.searchInputValue, this.state.extremePrices)})\r\n    }\r\n\r\n    // Функция, которая сохраняет значения из полей цена \"От\" и цена \"До\" в localStorage и state, после их изменения вызывает функцию фильтрации с новыми данными\r\n    handleChangePriceSlider = (extremePrices) => {\r\n        localStorage.setItem('maxPrice', extremePrices[1])\r\n        localStorage.setItem('minPrice', extremePrices[0])\r\n        this.setState({\r\n            extremePrices: extremePrices,\r\n        }, () => {this.props.handleShopDataChange(this.state.searchInputValue, this.state.extremePrices)})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Row className={'my-5'}>\r\n                <Col xs={5}>\r\n                    <LiveSearch\r\n                        shopData={this.props.shopData}\r\n                        handleLiveSearch={this.handleLiveSearch}\r\n                    />\r\n                </Col>\r\n                <Col xs={6} xsOffset={1}>\r\n                    <Slider\r\n                        shopData={this.props.shopData}\r\n                        handleChangePriceSlider={this.handleChangePriceSlider}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {Col, Jumbotron, Row} from \"react-bootstrap\";\r\n\r\n// Просто карточка для отображения товара по id\r\nexport default class Card extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <Jumbotron>\r\n                <Row>\r\n                    <Col xs={5} className={'align-center'}>\r\n                        <img height={'400px'} src={this.props.itemInfo[0].data.base_url}/>\r\n                    </Col>\r\n                    <Col xs={5} xsOffset={1}>\r\n                        <label>ID: <p>{this.props.itemInfo[0].id}</p></label><br/>\r\n                        <label>Название: <p>{this.props.itemInfo[0].data.title}</p></label><br/>\r\n                        <label>Цена: <p>{this.props.itemInfo[0].data.price}</p></label><br/>\r\n                        <label>Скидка: <p>{this.props.itemInfo[0].data.discount}</p></label>\r\n                    </Col>\r\n                </Row>\r\n            </Jumbotron>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport shopData from \"./utils/shop\";\nimport Table from \"./components/Table\";\nimport {Grid, Row} from \"react-bootstrap\";\nimport Filters from \"./components/Filters\";\nimport Card from \"./components/Card\";\n\nexport default class App extends Component {\n\n    state = {\n        shopData: shopData.goods,\n        showItemCard: false,\n    }\n\n    // Смотрим, если что-нибудь из нужных нам значений уже есть localStorage, если есть, то вызываем фильтрующую функцию\n    componentDidMount() {\n        let [searchInputValue, minPrice, maxPrice] = [localStorage.getItem('searchInputValue'), localStorage.getItem('minPrice'), localStorage.getItem('maxPrice')]\n        if (searchInputValue || (minPrice && maxPrice)){\n            this.handleShopDataChange(searchInputValue, [minPrice, maxPrice])\n        }\n    }\n\n    // Фильтрующая функция searchInputValue - значение поля поиска по названию/id, extremePrices - массив с двумя значениями: цена \"От\" и цена \"До\"\n    handleShopDataChange = (searchInputValue, extremePrices) => {\n        let [maxPrice, minPrice, shopItemValue, showItemCard] = [Number.MAX_VALUE, 0, '', false]\n        // Проверяем на null, на случай, если функция вызвана со значениями из localStorage и на undefined, если фильтр с ценами пока не трогали\n        if (extremePrices !== undefined && !!extremePrices[0] && !!extremePrices[1]) [maxPrice, minPrice] = [extremePrices[1], extremePrices[0]]\n        // Такая же проверка на null и undefined, только для поля поиска по названию/id\n        if (searchInputValue !== undefined && !!searchInputValue) {\n            // Проверка если в поле поиска по названию/id ввели число\n            showItemCard = !Number.isNaN(parseInt(searchInputValue))\n            if (showItemCard) shopItemValue = parseInt(searchInputValue)\n            else shopItemValue = searchInputValue.toLowerCase()\n        }\n        // Находим нужные товары согласно указанным фильтрам\n        let displayedShopItems = shopData.goods.filter(element => {\n            let price = element.data.price\n            let searchValue = element.data.title.toLowerCase()\n            let itemId = element.id\n            // Находим товар по id, подразумевая, что id уникален для каждого товара\n            if (showItemCard) return shopItemValue === itemId\n            // Находим товар по букве/буквам в названии (регистр не важен, поскольку приводим к нижнему регистру) и указанному промежутку цен\n            else return searchValue.indexOf(shopItemValue) !== -1 && price <= maxPrice && price >= minPrice\n        })\n        this.setState({\n            shopData: displayedShopItems,\n            showItemCard: showItemCard,\n        })\n    }\n\n    render() {\n        return (\n            <Grid>\n                <Filters shopData={shopData.goods} handleShopDataChange={this.handleShopDataChange}/>\n                <Row>\n                    {this.state.showItemCard && this.state.shopData.length === 1 ? (\n                            <Card itemInfo={this.state.shopData}/>\n                        ) : (\n                            <Table shopData={this.state.shopData}/>\n                        )\n                    }\n                </Row>\n            </Grid>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}